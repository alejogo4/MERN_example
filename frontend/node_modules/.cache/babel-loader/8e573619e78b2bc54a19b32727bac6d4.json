{"ast":null,"code":"/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nvar SEC_ARRAY = [60, 60, 24, 7, 365 / 7 / 12, 12];\n/**\n * format Date / string / timestamp to timestamp\n * @param input\n * @returns {*}\n */\n\nexport function toDate(input) {\n  if (input instanceof Date) return input; // @ts-ignore\n\n  if (!isNaN(input) || /^\\d+$/.test(input)) return new Date(parseInt(input));\n  input = (input || ''). // @ts-ignore\n  trim().replace(/\\.\\d+/, '') // remove milliseconds\n  .replace(/-/, '/').replace(/-/, '/').replace(/(\\d)T(\\d)/, '$1 $2').replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n  .replace(/([+-]\\d\\d):?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n\n  return new Date(input);\n}\n/**\n * format the diff second to *** time ago, with setting locale\n * @param diff\n * @param localeFunc\n * @returns\n */\n\nexport function formatDiff(diff, localeFunc) {\n  // if locale is not exist, use defaultLocale.\n  // if defaultLocale is not exist, use build-in `en`.\n  // be sure of no error when locale is not exist.\n  var agoIn = diff < 0 ? 1 : 0; // time in or time ago\n\n  diff = Math.abs(diff);\n  var totalSec = diff;\n  var idx = 0;\n\n  for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {\n    diff /= SEC_ARRAY[idx];\n  } // Math.floor\n\n\n  diff = ~~diff;\n  idx *= 2;\n  if (diff > (idx === 0 ? 9 : 1)) idx += 1; // @ts-ignore\n\n  return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff);\n}\n/**\n * calculate the diff second between date to be formatted an now date.\n * @param date\n * @param relativeDate\n * @returns\n */\n\nexport function diffSec(date, relativeDate) {\n  relativeDate = relativeDate ? toDate(relativeDate) : new Date();\n  return (+relativeDate - +toDate(date)) / 1000;\n}\n/**\n * nextInterval: calculate the next interval time.\n * - diff: the diff sec between now and date to be formatted.\n *\n * What's the meaning?\n * diff = 61 then return 59\n * diff = 3601 (an hour + 1 second), then return 3599\n * make the interval with high performance.\n **/\n\nexport function nextInterval(diff) {\n  var rst = 1,\n      i = 0,\n      d = Math.abs(diff);\n\n  for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n    diff /= SEC_ARRAY[i];\n    rst *= SEC_ARRAY[i];\n  }\n\n  d = d % rst;\n  d = d ? rst - d : rst;\n  return Math.ceil(d);\n}","map":null,"metadata":{},"sourceType":"module"}